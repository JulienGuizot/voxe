.row-fluid
  .span12
    %h2 Tags of #{@election.name}

.row-fluid
  .span4
    %button.add-root-tag.btn Add an existing tag

  .span6
    = simple_form_for [:new_admin, @tag], html: {class: "form-horizontal"} do |f|
      .control-group
        = f.label :name, "or create a new tag", class: "control-label"
        .controls
          = f.input_field :name, placeholder: "Tag name"
          = f.submit 'Create', class: "btn"

.row-fluid
  .span12
    %hr

.row-fluid
  .span4.offset8
    %form#form-tag-search.form-search.form-horizontal
      .control-group
        = label_tag "tag-search", "Quick search :", class: "control-label"
        .controls
          .input-append
            = text_field_tag "tag-search", nil, class: "search-query", placeholder: "Search", autocomplete: "off"
            = button_tag type: "submit", class: "btn" do
              %i.icon-search

.row
  .span12
    %ul.election-tags{:id => @election.id}
      - @election_tags.each do |et|
        %li.tag.root-tag.span2.offset1{:id => et.tag.id}
          .tag-name
            = et.tag
            %button.btn.add-tag +
            %button.btn.rm-tag -
          %ul
            - et.children_election_tags.each do |sub_et|
              %li.tag.sub-tag.span2{:id => sub_et.tag.id}
                .tag-name
                  = sub_et.tag
                  %button.btn.rm-tag -
                %ul
                  - sub_et.children_election_tags.each do |sub_sub_et|
                    %li.tag.sub-sub-tag.span2{:id => sub_sub_et.tag.id}
                      .tag-name
                        = sub_sub_et.tag
                        %button.btn.rm-tag -

:coffee
  $ ->
    # Prevent from sending form
    $("#form-tag-search").on "submit", (e) ->
      e.preventDefault()
  
    # Listen on keyup to trigger tags filtering
    $("#tag-search").on "keyup", (e) ->
      input = $(this).val().toLowerCase()
      if (e.keyCode > 32 && e.keyCode < 128) || e.keyCode == 8
        filterTags(input)

    filterTags = (input) ->
      filterTagsTree($('.root-tag'), input)
  
    matchTagName = (tag, input) ->
      tag.children().first().text().toLowerCase().search(input) != -1
  
    filterTagsTree = (tags, input) ->
      _.reduce(tags, (acc, tag) ->
        $tag = $(tag)
        # If the name matches or if a subnode matches
        # the input We keep the parent node
        if filterTagsTree($tag.find("li"), input) || matchTagName($tag, input)
          $tag.show()
          acc || true
        else
          $tag.hide()
          acc || false
      , false)

    getTag = (id, cb) ->
      $.ajax
        url: '/api/v1/tags/' + id
        method: 'GET'
        success: (response, status, xhr) ->
          cb(response.response.tag)
        error: (xhr, status, body) ->
          cb({})

    buildTagsSelect = (select, filterIds) ->
      filterIds = []
      $(".tag").each ->
        filterIds.push this.id
      select.select2
        placeholder: "Click here to select a tag"
        formatSearching: -> "Please wait..."
        ajax:
          url: '/api/v1/tags/search'
          dataType: 'json'
          placeholder: "Search for a tag"
          minimumInputLength: 1
          data: (term, page) ->
            name: term
          results: (data, page) ->
            results: _.filter data.response, (tag) ->
              filterIds.indexOf(tag.id) == -1
        formatResult: (tag) ->
          tag.name
        formatSelection: (tag) ->
          tag.name

    buildNewTag = (elem) ->
      # Build our tag and add it to the page
      # We first check who's the parent node to manage the class
      buttons = $("<button></button>").text("-").addClass("btn").addClass("rm-tag").on("click", removeTag)
      addButton = $("<button></button>").text("+").addClass("btn").addClass("add-tag").on("click", addTag)
      classes = $(elem).parent().parent().attr "class"
      if classes.indexOf("container-fluid") != -1
        tag_class = "root-tag"
        buttons = buttons.before addButton
      else if classes.indexOf("root-tag") != -1
        tag_class = "sub-tag"
        buttons = buttons.before addButton
      else if classes.indexOf("sub-tag") != -1
        tag_class = "sub-sub-tag"

      # We create the HTML tag directly
      $("<li></li>").
        addClass(tag_class).
        addClass("tag").
        addClass("span2").
        attr("id", elem.tag.id).
        append(
          $("<div></div>").
          addClass("tag-name").
          text(elem.tag.name).
          append(buttons)
        ).
        append($("<ul></ul>"))

    addRootTag = (e) ->
      select = $("<div></div>")
      $(this).parent().append(select)
      buildTagsSelect(select)
      select.on "change", (e) =>
        getTag e.val, (tag) =>
          @tag = tag
          $.ajax
            url: '/api/v1/elections/'+ $(".election-tags").attr("id") + '/addtag'
            type: 'POST'
            data:
              tagId: tag.id
            success: (response, status, xhr) =>
              select.select2("destroy")
              $(".election-tags").prepend buildNewTag(@)

      addTag = (e) ->
        select = $("<div></div>")
        $(this).parent().append(select)
        buildTagsSelect(select)

        select.on "change", (e) =>
          getTag e.val, (tag) =>
            if tag == {}
              false
            else
              @tag = tag
              $.ajax
                url: '/api/v1/elections/'+ $(".election-tags").attr("id") + '/addtag'
                type: 'POST'
                data:
                  tagId: tag.id
                  parentTagId: $(this).parent().parent().attr("id")
                success: (response, status, xhr) =>
                  # Remove select2, we don't need it anymore
                  select.select2("destroy")
                  $(this).parent().next().prepend buildNewTag(@)
                error: (response, status, body) ->
                  if $(".alert").size() == 0
                    $("body .container-fluid").prepend $('<div class="alert alert-error"></div>')
                  $(".alert").text(response.responseText)
                $(".alert").show()

    removeTag = (e) ->
      $.ajax
        url: '/api/v1/elections/' + $(".election-tags").attr("id") + '/removetag'
        type: 'DELETE'
        data:
          tagId: $(this).parent().parent().attr('id')
        success: (response, status, body) =>
          $(this).parent().parent().remove()
        error: (response, status, body) =>
          if response.status == 200
            $(this).parent().parent().remove()

    $(".add-root-tag").on "click", addRootTag
    $(".add-tag").on "click", addTag
    $(".rm-tag").on "click", removeTag

  
